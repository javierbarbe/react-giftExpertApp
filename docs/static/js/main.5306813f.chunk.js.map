{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","console","log","trim","length","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","nepe","className","alt","src","width","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","categoria","i","__divRoot","document","querySelector","ReactDOM","render"],"mappings":"mMAEaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAErB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KA8BI,OACI,uBAAMC,SAxBQ,SAACC,GACnBA,EAAEC,iBACEJ,GAMAF,EAAc,IAElBO,QAAQC,IAAI,iCAAiCN,GAC1CA,EAAWO,OAAOC,OAAO,IACxBV,GAAc,SAACK,GAAD,OAAOH,GAAP,mBAAqBG,OACnCF,EAAc,MAWd,UACI,mCAAMD,EAAN,OACA,uBACIS,KAAK,OACLC,MAAOV,EACPW,SAjCU,SAACR,GACvBF,EAAcE,EAAES,OAAOF,c,+BCNtBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAAU,4FAAsEC,UAAUH,GAF7E,SAGGI,MAAMF,GAHT,cAGbG,EAHa,gBAIGA,EAAKC,OAJR,uBAIZC,EAJY,EAIZA,KACDC,EAAUD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCAPO,EAAc,SAAC,GAAwB,EAAvBJ,GAAwB,IAArBC,EAAoB,EAApBA,MAAMV,EAAc,EAAdA,IAAc,EAAVc,KAEtC,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAKN,EAAOO,IAAKjB,EAAKkB,MAAM,SACjC,4BAAIR,QCDHS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAGrB,ECNwB,SAACA,GACrB,MAA0Bf,mBAAS,CAC/BsB,KAAK,GACLe,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAwBA,OApBAC,qBAAU,WAEF1B,EAAQC,GACL0B,MAAK,SAAAC,GACJC,YAAW,WACPJ,EAAS,CACLjB,KAAKoB,EACLL,SAAQ,MAEb,UAGb,CAACtB,IAQIuB,EDnBoBM,CAAa7B,GAAhCa,EAAZ,EAAON,KAAae,EAApB,EAAoBA,QAoBpB,OACI,qCACI,6BAAKtB,IACJsB,GAAW,wCAEZ,qBAAKL,UAAU,aAAf,SACKJ,EAAOJ,KAAI,SAACC,GACT,OACQ,cAAC,EAAD,eAGQA,GAFCA,EAAIC,aEhC5BmB,EAAe,WACxB,IAEA,EAAoC7C,mBAFlB,CAAC,cAEnB,mBAAO8C,EAAP,KAAmB/C,EAAnB,KAeA,OACI,qCACI,oBAAIiC,UAAU,qCAAd,0BACA,uBACA,cAAC,EAAD,CAAajC,cAAeA,IAE5B,6BAEc+C,EAAWtB,KAAK,SAACuB,EAAUC,GACvB,OACM,cAAC,EAAD,CAEIjC,SAAWgC,GADNA,YC5BvCE,G,MAAYC,SAASC,cAAc,UAEzCC,IAASC,OAAQ,cAAC,EAAD,IAAiBJ,K","file":"static/js/main.5306813f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from \"prop-types\";\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n        const [inputValue, setInputValue] = useState(''); // EXPLICACION SI NO LE PASO NADA LE PASO UNDEFINED; QUE DA ERROR\r\n                                                        // PARA EVITARLO MANDAMOS SIMPLEMENTE UN STRING VACIO          \r\n\r\n        const handleInputChange = (e)=> {\r\n            setInputValue(e.target.value);\r\n        }\r\n\r\n        const handleSubmit  = (e) => {\r\n            e.preventDefault();\r\n            if(!inputValue){ \r\n                // si no hay nada escrito\r\n                // setCategories((e)=> {\r\n                //     // e.pop();\r\n                //     // return [...e];\r\n                // });\r\n                setCategories([]);\r\n            }\r\n            console.log('en AddCategory__ el inputValue',inputValue);\r\n            if(inputValue.trim().length>0){\r\n                setCategories((e)=> [inputValue,...e]);\r\n                setInputValue('');\r\n            }else{\r\n                // setCategories((e)=> {\r\n                //     e.pop();\r\n                //     return [...e];\r\n                // })\r\n            }\r\n        }\r\n\r\n\r\n            return (\r\n                <form onSubmit={handleSubmit}>\r\n                    <h1> {inputValue} </h1>\r\n                    <input\r\n                        type='text'\r\n                        value={inputValue}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                </form>\r\n            )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired\r\n}\r\n// PropTypes\r\n","const apikey= 'BNHr7DKKtEZKrh4560eX15w3h5oNDWT5';\r\n\r\nexport const getGifs = async (category) => {\r\n\r\n    const url     = 'https://api.giphy.com/v1/gifs/search?api_key='+apikey+'&limit=10&q='+encodeURI(category);\r\n    const resp    = await fetch(url);\r\n    const {data}  = await resp.json();\r\n    const gifs    = data.map(img=> {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url // por si no hubiera imagenes se pone ? \r\n        }\r\n    });\r\n    // console.log('en getGifs.js',gifs);\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,title,url,nepe}) => {\r\n    // console.log(nepe);\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img alt={title} src={url} width='100%'/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","// import React, { useState,useEffect } from 'react'\r\nimport React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n// usando un customHook\r\n    const {data:images, loading} = useFetchGifs(category);\r\n    //#region \r\n                // console.log('el state ',data, loading);\r\n                // const [images, setImages] = useState([]);\r\n                // const recuperaGifsHttp_Async = async(category) => {\r\n                //         const imgs = await getGifs(category);\r\n                //         setImages(imgs);\r\n                // }\r\n                // // EXPLICACION USE EFFECT\r\n                // // EJECUTA EL CODIGO DE MANERA CONDICIONAL... si no... podrÃ­amos entrar en un bucle infinito\r\n                // // porque cuando modifico algo del contenido del componente, lo re-renderiza\r\n                // // mandando un arreglo vacio como segundo argumento... hace que el codigo solo se ejecute \r\n                // // cuando el codigo es renderizado por 1a vez\r\n                // useEffect( () => {\r\n                //     // getGifs(category).then((imgss)=> {\r\n                //     //     setImages(imgss);\r\n                //     // })\r\n                //     recuperaGifsHttp_Async(category);\r\n                // },[ category ]);\r\n  //#endregion\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            {loading && <p>Loading</p>}\r\n\r\n            <div className=\"card-grid \">\r\n                {images.map((img)=> {\r\n                    return (\r\n                            <GifGridItem \r\n                                key={img.id} \r\n                                // nepe={img.id}\r\n                                {...img} // esto manda como propiedad toooodas las del objeto img\r\n                                /// como si mandase url= {img.url} id= {img.id}\r\n                            />\r\n                       \r\n                        )\r\n                })}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import  { useState } from 'react'\r\nimport { useEffect } from 'react';\r\nimport {getGifs} from \"../helpers/getGifs\";\r\nexport const useFetchGifs = (category) => {\r\n        const [state, setState] = useState({\r\n            data:[],\r\n            loading:true\r\n        });\r\n        useEffect(()=> {\r\n\r\n                getGifs(category)\r\n                  .then(imgs=>{\r\n                    setTimeout(() => {\r\n                        setState({\r\n                            data:imgs,\r\n                            loading:false\r\n                        });\r\n                    }, 3000);\r\n                });\r\n\r\n        },[category])\r\n        // setTimeout(() => {\r\n        //     setState({\r\n        //         data:[1,2,3],\r\n        //         loading:false\r\n        //     })\r\n        // }, 3000);\r\n\r\n        return state;\r\n}\r\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n// import { AddCategory } from './components/AddCategory';\n// import { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n    const categorias =['One Punch'];\n    \n    const [categories, setCategories] = useState(categorias);\n    //#region eXTRA EXPLICACION\n                // const handleAdd=() => {\n                //     let aux = categories.slice();\n                    \n                //     //EXPLICACION\n                //     // otra manera con el operador spread\n                //     let aux2 = [...categories,'He-man'];\n                //     // otra manera... si no tuviera el categories referenciado\n                //     setCategories((cates=> [...cates,'heman']));\n                //     // aux.push('He-man');\n                //     // setCategories(aux);\n                //     console.log(categories);\n                // }\n    //#endregion\n    return (\n        <>\n            <h2 className=\"animate__animated animate__fadeIn \">GifExpertApp</h2>\n            <hr />\n            <AddCategory setCategories={setCategories} />\n            \n            <ol>\n                      {\n                          categories.map( (categoria,i) => {\n                              return (\n                                    <GifGrid \n                                        key={categoria} \n                                        category={ categoria }/>\n                              )\n                          })\n                      }\n                  </ol>\n\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nconst __divRoot = document.querySelector('#root');\n\nReactDOM.render( <GifExpertApp />,__divRoot);\n\n\n"],"sourceRoot":""}